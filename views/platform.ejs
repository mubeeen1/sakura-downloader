<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>ðŸŒ¸ <%= platform.charAt(0).toUpperCase() + platform.slice(1) %> Downloader - Sakura</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸŒ¸</text></svg>" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --success-gradient: linear-gradient(135deg, #81FBB8 0%, #28C76F 100%);
            --warning-gradient: linear-gradient(135deg, #FFE066 0%, #FF6B35 100%);
            --danger-gradient: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
            
            --card-bg: rgba(255, 255, 255, 0.15);
            --text-primary: #ffffff;
            --text-secondary: rgba(255, 255, 255, 0.8);
            --border-color: rgba(255, 255, 255, 0.3);
            --shadow-primary: 0 20px 40px rgba(0, 0, 0, 0.3);
            --shadow-hover: 0 30px 60px rgba(0, 0, 0, 0.4);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            background-size: 400% 400%;
            animation: gradientShift 8s ease infinite;
            color: var(--text-primary);
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 2rem;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        /* Floating particles */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }

        .particle {
            position: absolute;
            width: 3px;
            height: 3px;
            background: rgba(255, 255, 255, 0.7);
            border-radius: 50%;
            animation: float linear infinite;
        }

        @keyframes float {
            0% {
                transform: translateY(100vh) rotate(0deg);
                opacity: 0;
            }
            10% { opacity: 1; }
            90% { opacity: 1; }
            100% {
                transform: translateY(-100px) rotate(360deg);
                opacity: 0;
            }
        }

        /* Header Section */
        .header {
            text-align: center;
            margin-bottom: 3rem;
            animation: fadeInDown 1s ease-out;
            position: relative;
            z-index: 10;
        }

        .back-btn {
            position: absolute;
            top: -1rem;
            left: -2rem;
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            padding: 0.8rem 1.5rem;
            border-radius: 50px;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
            backdrop-filter: blur(20px);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .back-btn:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-2px);
            box-shadow: var(--shadow-primary);
        }

        .platform-icon-large {
            font-size: 4rem;
            margin-bottom: 1rem;
            animation: bounce 2s ease-in-out infinite;
            text-shadow: 0 4px 20px rgba(0,0,0,0.3);
        }

        .platform-title {
            font-size: clamp(2.5rem, 6vw, 4rem);
            font-weight: 800;
            background: linear-gradient(135deg, #fff 0%, #f0f8ff 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
            text-shadow: 0 4px 20px rgba(255, 255, 255, 0.3);
        }

        .platform-subtitle {
            font-size: 1.1rem;
            font-weight: 300;
            color: var(--text-secondary);
            margin-bottom: 2rem;
        }

        /* Main Card */
        .download-card {
            background: var(--card-bg);
            backdrop-filter: blur(20px);
            border: 1px solid var(--border-color);
            border-radius: 24px;
            padding: 2rem;
            max-width: 600px;
            width: 100%;
            box-shadow: var(--shadow-primary);
            animation: fadeInUp 1s ease-out 0.2s both;
            position: relative;
            z-index: 10;
        }

        /* URL Input Section */
        .input-section {
            margin-bottom: 2rem;
        }

        .input-label {
            display: block;
            font-size: 1.1rem;
            font-weight: 500;
            margin-bottom: 0.8rem;
            color: var(--text-primary);
        }

        .url-input-container {
            position: relative;
            display: flex;
            align-items: center;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid transparent;
            border-radius: 16px;
            transition: all 0.3s ease;
            overflow: hidden;
        }

        .url-input-container:focus-within {
            border-color: rgba(255, 255, 255, 0.4);
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.1);
        }

        .url-input {
            flex: 1;
            background: transparent;
            border: none;
            outline: none;
            color: var(--text-primary);
            font-size: 1rem;
            padding: 1rem 1.2rem;
            font-weight: 400;
            font-family: 'Poppins', sans-serif;
        }

        .url-input::placeholder {
            color: var(--text-secondary);
        }

        .input-actions {
            display: flex;
            gap: 0.5rem;
            padding: 0.5rem;
        }

        .action-btn {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: var(--text-primary);
            padding: 0.6rem 1rem;
            border-radius: 12px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.4rem;
        }

        .action-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-1px);
        }

        .url-warning {
            color: #ff6b6b;
            font-size: 0.9rem;
            margin-top: 0.5rem;
            display: none;
            font-weight: 500;
        }

        /* Download Button */
        .download-btn {
            width: 100%;
            background: var(--primary-gradient);
            border: none;
            color: white;
            padding: 1rem 2rem;
            border-radius: 16px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            font-family: 'Poppins', sans-serif;
        }

        .download-btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: all 0.3s ease;
        }

        .download-btn:hover::before {
            width: 300px;
            height: 300px;
        }

        .download-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-hover);
        }

        .download-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        /* Loading Animation */
        .loading-container {
            display: none;
            text-align: center;
            margin: 2rem 0;
            animation: fadeIn 0.3s ease-out;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-top: 3px solid var(--text-primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .loading-text {
            font-size: 1.1rem;
            color: var(--text-secondary);
            font-weight: 500;
        }

        /* Result Section */
        .result-container {
            display: none;
            background: var(--card-bg);
            backdrop-filter: blur(20px);
            border: 1px solid var(--border-color);
            border-radius: 24px;
            padding: 2rem;
            max-width: 600px;
            width: 100%;
            margin-top: 2rem;
            box-shadow: var(--shadow-primary);
            animation: fadeInUp 0.5s ease-out;
            position: relative;
            z-index: 10;
        }

        .result-content {
            display: flex;
            gap: 1.5rem;
            align-items: center;
            justify-content: space-between;
            width: 100%;
        }

        .media-preview {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 16px;
            overflow: hidden;
            position: relative;
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 0;
            min-height: 120px;
            max-width: calc(100% - 250px); /* Account for button width + gap */
        }

        .media-thumbnail {
            max-width: 100%;
            max-height: 100%;
            width: auto;
            height: auto;
            object-fit: contain;
            border-radius: 16px;
            /* Allow image to take full available space */
            display: block;
        }

        .download-media-btn {
            background: var(--success-gradient);
            border: none;
            color: white;
            padding: 1rem 2rem;
            border-radius: 16px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            font-family: 'Poppins', sans-serif;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            /* Stuck to right side with fixed dimensions */
            width: 220px;
            height: 56px;
            flex-shrink: 0;
            white-space: nowrap;
            margin: 0;
            align-self: center;
        }

        .download-media-btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: all 0.3s ease;
        }

        .download-media-btn:hover::before {
            width: 300px;
            height: 300px;
        }

        .download-media-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-hover);
        }

        /* Animations */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeInDown {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateY(0);
            }
            40% {
                transform: translateY(-10px);
            }
            60% {
                transform: translateY(-5px);
            }
        }

        /* Responsive */
        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }
            
            .download-card {
                padding: 1.5rem;
            }
            
            .back-btn {
                position: static;
                margin-bottom: 1rem;
                display: inline-flex;
            }
            
            .result-content {
                flex-direction: column;
                gap: 1rem;
            }
            
            .media-preview {
                min-width: auto;
                min-height: auto;
            }
            
            .media-thumbnail {
                max-width: 150px;
                max-height: 150px;
            }
            
            .download-media-btn {
                width: 100%;
                margin: 0;
            }
            
            .input-actions {
                flex-direction: column;
                gap: 0.5rem;
                padding: 0.8rem;
            }
            
            .action-btn {
                justify-content: center;
                padding: 0.8rem;
            }
        }
        
        @media (max-width: 480px) {
            .platform-title {
                font-size: 2rem;
            }
            
            .download-card {
                padding: 1rem;
            }
            
            .url-input-container {
                flex-direction: column;
                align-items: stretch;
            }
            
            .input-actions {
                border-top: 1px solid var(--border-color);
                padding-top: 0.8rem;
                margin-top: 0.5rem;
            }
        }
    </style>
</head>
<body>
    <!-- Floating particles background -->
    <div class="particles"></div>

    <!-- Header Section -->
    <div class="header">
        <a href="/" class="back-btn">
            <i class="fas fa-arrow-left"></i>
            Back to Home
        </a>
        <div class="platform-icon-large">
            <% if (platform === 'instagram') { %><i class="fab fa-instagram"></i><% } %>
            <% if (platform === 'tiktok') { %><i class="fab fa-tiktok"></i><% } %>
            <% if (platform === 'youtube') { %><i class="fab fa-youtube"></i><% } %>
            <% if (platform === 'pinterest') { %><i class="fab fa-pinterest"></i><% } %>
            <% if (platform === 'facebook') { %><i class="fab fa-facebook"></i><% } %>
            <% if (platform === 'twitter') { %><i class="fab fa-twitter"></i><% } %>
            <% if (platform === 'gdrive') { %><i class="fab fa-google-drive"></i><% } %>
            <% if (platform === 'mediafire') { %><i class="fas fa-file-download"></i><% } %>
            <% if (platform === 'capcut') { %><i class="fas fa-video"></i><% } %>
        </div>
        <h1 class="platform-title"><%= platform.charAt(0).toUpperCase() + platform.slice(1) %> Downloader</h1>
        <p class="platform-subtitle">Download high-quality content from <%= platform.charAt(0).toUpperCase() + platform.slice(1) %> with ease</p>
    </div>

    <!-- Main Download Card -->
    <div class="download-card">
        <form id="downloadForm" method="POST" action="/<%= platform %>/download">
            <div class="input-section">
                <label for="urlInput" class="input-label">
                    <i class="fas fa-link"></i>
                    Enter <%= platform.charAt(0).toUpperCase() + platform.slice(1) %> URL
                </label>
                <div class="url-input-container">
                    <input type="text" id="urlInput" name="url" class="url-input" 
                           placeholder="Paste your <%= platform %> link here..." autocomplete="off" />
                    <div class="input-actions">
                        <button type="button" class="action-btn" id="pasteBtn" title="Paste from clipboard">
                            <i class="fas fa-paste"></i>
                            Paste
                        </button>
                        <button type="button" class="action-btn" id="clearBtn" title="Clear input" style="display:none;">
                            <i class="fas fa-times"></i>
                            Clear
                        </button>
                    </div>
                </div>
                <div id="urlWarning" class="url-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    Not a valid <%= platform.charAt(0).toUpperCase() + platform.slice(1) %> URL. Please check and try again.
                </div>
            </div>
            <button type="submit" class="download-btn" id="downloadBtn">
                <i class="fas fa-download"></i>
                Download Media
            </button>
        </form>
    </div>

    <!-- Loading Animation -->
    <div class="loading-container" id="loadingIndicator">
        <div class="loading-spinner"></div>
        <div class="loading-text">Processing your request...</div>
    </div>

    <!-- Result Container -->
    <div class="result-container" id="resultContainer">
        <div class="result-content">
            <div class="media-preview">
                <img id="thumbnailImage" src="" alt="Media Thumbnail" class="media-thumbnail" />
            </div>
            <button id="downloadMediaBtn" class="download-media-btn">
                <i class="fas fa-download"></i>
                Download Media
            </button>
        </div>
    </div>

    <script>
        const urlInput = document.getElementById('urlInput');
        const pasteBtn = document.getElementById('pasteBtn');
        const clearBtn = document.getElementById('clearBtn');
        const urlWarning = document.getElementById('urlWarning');
        const downloadBtn = document.getElementById('downloadBtn');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const resultContainer = document.getElementById('resultContainer');

        const platform = "<%= platform %>";

        const platformUrlPatterns = {
            instagram: /^https?:\/\/(www\.)?(instagram\.com|instagr\.am)/i,
            tiktok: /^https?:\/\/(www\.)?(tiktok\.com|vm\.tiktok\.com)/i,
            youtube: /^https?:\/\/(www\.)?(youtube\.com|youtu\.be|m\.youtube\.com|youtube-nocookie\.com)/i,
            pinterest: /^https?:\/\/(www\.)?(pinterest\.com|pin\.it)/i,
            facebook: /^https?:\/\/(www\.)?(facebook\.com|fb\.watch)/i,
            twitter: /^https?:\/\/(www\.)?twitter\.com/i,
            gdrive: /^https?:\/\/(drive\.google\.com|docs\.google\.com)/i,
            mediafire: /^https?:\/\/(www\.)?mediafire\.com/i,
            capcut: /^https?:\/\/(www\.)?capcut\.com/i
        };

        function validateUrl() {
            const url = urlInput.value.trim().toLowerCase();
            if (url === '') {
                urlWarning.style.display = 'none';
                downloadBtn.disabled = false;
                return;
            }
            // Extract domain substring from platformUrlPatterns keys
            const domainMap = {
                instagram: ['instagram.com', 'instagr.am'],
                tiktok: ['tiktok.com', 'vm.tiktok.com'],
                youtube: ['youtube.com', 'youtu.be', 'm.youtube.com', 'youtube-nocookie.com'],
                pinterest: ['pinterest.com', 'pin.it'],
                facebook: ['facebook.com', 'fb.watch'],
                twitter: ['twitter.com'],
                gdrive: ['drive.google.com', 'docs.google.com'],
                mediafire: ['mediafire.com'],
                capcut: ['capcut.com']
            };
            const domains = domainMap[platform];
            if (!domains) {
                urlWarning.style.display = 'none';
                downloadBtn.disabled = false;
                return;
            }
            const isValid = domains.some(domain => url.includes(domain));
            if (isValid) {
                urlWarning.style.display = 'none';
                downloadBtn.disabled = false;
            } else {
                urlWarning.style.display = 'block';
                downloadBtn.disabled = true;
            }
        }

        function toggleIcons() {
            if (urlInput.value.trim() === '') {
                pasteBtn.style.display = 'flex';
                clearBtn.style.display = 'none';
            } else {
                pasteBtn.style.display = 'none';
                clearBtn.style.display = 'flex';
            }
            validateUrl();
        }

        urlInput.addEventListener('input', toggleIcons);

pasteBtn.addEventListener('click', async () => {
            try {
                const text = await navigator.clipboard.readText();
                if (text) {
                    urlInput.value = text.split('\\n')[0];
                    toggleIcons();
                }
            } catch (err) {
                window.location.href = `/error?message=${encodeURIComponent('Failed to read clipboard contents: ' + err)}`;
            }
        });

        clearBtn.addEventListener('click', () => {
            urlInput.value = '';
            toggleIcons();
            urlInput.focus();
        });

        // Initialize icon visibility and validation on page load
        toggleIcons();

        // Ensure loader and result container are hidden on initial page load
        loadingIndicator.style.display = 'none';
        resultContainer.style.display = 'none';

        // Handle form submission with AJAX to get media and thumbnail info
        document.getElementById('downloadForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const url = urlInput.value.trim();
            if (!url) return;

            // Show loading indicator and hide result container
            loadingIndicator.style.display = 'block';
            resultContainer.style.display = 'none';

            // Disable download button and change text
            downloadBtn.disabled = true;
            downloadBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Downloading...';

            try {
                const response = await fetch(`/${platform}/download`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ url })
                });

if (!response.ok) {
                    const errorText = await response.text();
                    // Try to extract error message from HTML or show generic message
                    let message = 'An error occurred during download.';
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(errorText, 'text/html');
                    const errorElement = doc.querySelector('body') || doc.querySelector('h1') || doc.querySelector('p');
                    if (errorElement) {
                        message = errorElement.textContent.trim();
                    }
                    window.location.href = `/error?message=${encodeURIComponent('Error: ' + message)}`;
                    downloadBtn.disabled = false;
                    downloadBtn.innerHTML = '<i class="fas fa-download"></i> Download Media';
                    loadingIndicator.style.display = 'none';
                    return;
                }

                const data = await response.json();

                // Show thumbnail or black placeholder with cache busting
                const thumbnailImage = document.getElementById('thumbnailImage');
                const cacheBuster = Date.now() + Math.random().toString(36).substr(2, 9);
                thumbnailImage.src = data.thumbnailFile + '?v=' + cacheBuster;
                thumbnailImage.alt = data.title || 'Thumbnail';
                
                // Force image reload by removing and re-adding to DOM
                const parent = thumbnailImage.parentNode;
                const newImage = thumbnailImage.cloneNode(true);
                parent.removeChild(thumbnailImage);
                parent.appendChild(newImage);
                
                // Update reference to new image element
                document.getElementById('thumbnailImage').id = '';
                newImage.id = 'thumbnailImage';

                // Show result container
                resultContainer.style.display = 'flex';

                // Set download button data
                const downloadMediaBtn = document.getElementById('downloadMediaBtn');
                downloadMediaBtn.dataset.mediaFile = data.mediaFile;
                downloadMediaBtn.dataset.title = data.title || 'downloaded_media';
                downloadMediaBtn.dataset.downloadFilename = data.downloadFilename || 'media.mp4';

} catch (error) {
                window.location.href = `/error?message=${encodeURIComponent('Error: ' + error.message)}`;
            } finally {
                // Hide loading indicator and enable download button
                loadingIndicator.style.display = 'none';
                downloadBtn.disabled = false;
                downloadBtn.innerHTML = '<i class="fas fa-download"></i> Download Media';
            }
        });

        // Handle media download button click
        document.getElementById('downloadMediaBtn').addEventListener('click', () => {
            const downloadMediaBtn = document.getElementById('downloadMediaBtn');
            const mediaFile = downloadMediaBtn.dataset.mediaFile;
            const downloadFilename = downloadMediaBtn.dataset.downloadFilename;

            if (!mediaFile || !downloadFilename) return;

            // Use the download endpoint to ensure proper filename and headers
            const downloadUrl = `/download/${encodeURIComponent(downloadFilename)}`;
            
            // Create a temporary link to trigger download
            const link = document.createElement('a');
            link.href = downloadUrl;
            link.download = downloadFilename; // Use the filename with extension
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            // Note: tmp folder cleanup is now handled automatically by the backend after successful download
        });

        // Create floating particles
        function createParticles() {
            const particlesContainer = document.querySelector('.particles');
            const particleCount = 50;

            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 15 + 's';
                particle.style.animationDuration = (Math.random() * 10 + 10) + 's';
                particlesContainer.appendChild(particle);
            }
        }

        // Initialize particles on page load
        document.addEventListener('DOMContentLoaded', createParticles);
    </script>
</body>
</html>
